unit uItemPedido;

interface

uses
  SysUtils,
  Classes,
  uWKConnection,
  uWKObject;

type
  TItemPedido = class(TWKObject)
  private
    FCodProduto: Integer;
    FCodSequencia: Integer;
    FDescrProduto: string;
    FNroPedido: Integer;
    FQtdeItens: Integer;
    FVlrTotal: Double;
    FVlrUnitario: Double;
  public
    procedure Clear;
    procedure Assign(const AItemPedido: TItemPedido);
    property CodProduto: Integer read FCodProduto write FCodProduto;
    property CodSequencia: Integer read FCodSequencia write FCodSequencia;
    property DescrProduto: string read FDescrProduto write FDescrProduto;
    property NroPedido: Integer read FNroPedido write FNroPedido;
    property QtdeItens: Integer read FQtdeItens write FQtdeItens;
    property VlrTotal: Double read FVlrTotal write FVlrTotal;
    property VlrUnitario: Double read FVlrUnitario write FVlrUnitario;
  end;

  TItensPedido = class(TWKObjectList<TItemPedido>)
  public
    procedure BuscarItensPedido(const ANroPedido: Integer);
    procedure BuscarItemPorSequencia(const ACodSequencia: Integer;
      var AItemPedido: TItemPedido);
  end;

implementation

{ TItensPedido }

procedure TItensPedido.BuscarItemPorSequencia(const ACodSequencia: Integer;
  var AItemPedido: TItemPedido);
var
  i: Integer;
begin
  AItemPedido := nil;
  for i := 0 to Count - 1 do
  begin
    if Items[i].CodSequencia = ACodSequencia then
    begin
      AItemPedido := Items[i];
      Break;
    end;
  end;
end;

procedure TItensPedido.BuscarItensPedido(const ANroPedido: Integer);
var
  oItemPedido: TItemPedido;
begin
  Clear;
  Query.SQL.Clear;
  Query.SQL.Add('select                                        ');
  Query.SQL.Add('  i.cod_sequencia,                            ');
  Query.SQL.Add('  i.nro_pedido,                               ');
  Query.SQL.Add('  i.cod_produto,                              ');
  Query.SQL.Add('  i.qtd,                                      ');
  Query.SQL.Add('  i.vlr_unitario,                             ');
  Query.SQL.Add('  i.vlr_total,                                ');
  Query.SQL.Add('  p.descr_produto                            ');
  Query.SQL.Add('from                                          ');
  Query.SQL.Add('  pedido_item i                               ');
  Query.SQL.Add('inner join                                    ');
  Query.SQL.Add('  produto p on p.cod_produto = i.cod_produto  ');
  Query.SQL.Add('where                                         ');
  Query.SQL.Add('  i.nro_pedido = :nro_pedido                  ');
  Query.ParamByName('nro_pedido').AsInteger := ANroPedido;
  Query.Open;
  try
    while not Query.Eof do
    begin
      oItemPedido := TItemPedido.Create(nil);
      oItemPedido.CodSequencia := Query.FieldByName('cod_sequencia').AsInteger;
      oItemPedido.NroPedido := Query.FieldByName('nro_pedido').AsInteger;
      oItemPedido.CodProduto := Query.FieldByName('cod_produto').AsInteger;
      oItemPedido.QtdeItens := Query.FieldByName('qtd').AsInteger;
      oItemPedido.VlrUnitario := Query.FieldByName('vlr_unitario').AsCurrency;
      oItemPedido.VlrTotal := Query.FieldByName('vlr_total').AsCurrency;
      oItemPedido.DescrProduto := Query.FieldByName('descr_produto').AsString;
      Add(oItemPedido);
      Query.Next;
    end;
  finally
    Query.Close;
  end;
end;

{ TItemPedido }

procedure TItemPedido.Assign(const AItemPedido: TItemPedido);
begin
  CodProduto := AItemPedido.CodProduto;
  CodSequencia := AItemPedido.CodSequencia;
  DescrProduto := AItemPedido.DescrProduto;
  NroPedido := AItemPedido.NroPedido;
  QtdeItens := AItemPedido.QtdeItens;
  VlrTotal := AItemPedido.VlrTotal;
  VlrUnitario := AItemPedido.VlrUnitario;
end;

procedure TItemPedido.Clear;
begin
  CodProduto := 0;
  CodSequencia := 0;
  DescrProduto := EmptyStr;
  NroPedido := 0;
  QtdeItens := 0;
  VlrTotal := 0;
  VlrUnitario := 0;
end;

end.
